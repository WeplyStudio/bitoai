'use client';
import { useState } from 'react';
import { ThumbsUp, ThumbsDown, RefreshCw, Pencil, Save, X } from 'lucide-react';
import { BitoIcon, UserIcon } from '@/components/icons';
import { cn } from '@/lib/utils';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import type { Message } from './chat-panel';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import { ImagePreviewDialog } from './image-preview-dialog';

interface ChatMessageProps {
  message: Message;
  onFeedback: (messageId: string) => void;
  onRegenerate: (messageId: string) => void;
  onStartEdit: (messageId: string, content: string) => void;
  onCancelEdit: () => void;
  onSaveEdit: (messageId: string, newContent: string) => void;
  isEditing: boolean;
  editedContent: string;
  onEditedContentChange: (content: string) => void;
}

export function ChatMessage({ 
  message, 
  onFeedback,
  onRegenerate,
  onStartEdit,
  onCancelEdit,
  onSaveEdit,
  isEditing,
  editedContent,
  onEditedContentChange
}: ChatMessageProps) {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const isModel = message.role === 'model';
  const isUser = message.role === 'user';

  const handleSave = () => {
    if (editedContent.trim()) {
      onSaveEdit(message.id, editedContent);
    }
  };

  if (isModel) {
    return (
      <div className="group flex items-start gap-2 md:gap-3 justify-start">
        <Avatar className="h-8 w-8 border flex-shrink-0">
          <AvatarFallback className='bg-primary text-primary-foreground'>
            <BitoIcon className="h-5 w-5" />
          </AvatarFallback>
        </Avatar>
        <div className="flex flex-col items-start gap-2 w-full max-w-[95%] sm:max-w-[85%] md:max-w-[75%] lg:max-w-[70%]">
          <div className="min-w-0 w-fit flex-shrink rounded-lg bg-secondary px-4 py-3">
            {message.content && (
              <div className="prose prose-sm dark:prose-invert max-w-none">
                <ReactMarkdown remarkPlugins={[remarkGfm]}>
                  {message.content}
                </ReactMarkdown>
              </div>
            )}
            {message.imageUrl && (
              <>
                <div 
                  className={cn("mt-2 rounded-lg overflow-hidden border cursor-pointer", !message.content && "mt-0")}
                  onClick={() => setIsModalOpen(true)}
                >
                  <img 
                    src={message.imageUrl} 
                    alt="Generated by AI" 
                    className="max-w-sm w-full h-auto" 
                  />
                </div>
                {isModalOpen && <ImagePreviewDialog isOpen={isModalOpen} onOpenChange={setIsModalOpen} imageUrl={message.imageUrl} />}
              </>
            )}
          </div>
          <div className="opacity-0 group-hover:opacity-100 transition-opacity flex items-center gap-1">
            <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground hover:text-foreground">
              <ThumbsUp className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground hover:text-foreground" onClick={() => onFeedback(message.id)}>
              <ThumbsDown className="h-4 w-4" />
            </Button>
            <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground hover:text-foreground" onClick={() => onRegenerate(message.id)}>
              <RefreshCw className="h-4 w-4" />
            </Button>
          </div>
        </div>
      </div>
    );
  }

  if (isUser) {
    return (
      <div className="group flex justify-end">
        <div className="flex flex-col items-end gap-1 w-full max-w-[95%] sm:max-w-[85%] md:max-w-[75%] lg:max-w-[70%]">
          {isEditing ? (
            <div className="w-full space-y-2">
              <Textarea 
                  value={editedContent}
                  onChange={(e) => onEditedContentChange(e.target.value)}
                  className="w-full"
                  rows={3}
                  autoFocus
              />
              <div className="flex justify-end gap-2">
                  <Button variant="ghost" size="sm" onClick={onCancelEdit}>
                      <X className="h-4 w-4 mr-1"/>
                      Cancel
                  </Button>
                  <Button size="sm" onClick={handleSave}>
                      <Save className="h-4 w-4 mr-1"/>
                      Save & Submit
                  </Button>
              </div>
            </div>
          ) : (
            <>
              <div className="min-w-0 w-fit flex-shrink rounded-lg bg-primary text-primary-foreground px-4 py-3">
                {message.content && (
                  <div className="prose prose-sm dark:prose-invert max-w-none">
                    <ReactMarkdown remarkPlugins={[remarkGfm]}>
                      {message.content}
                    </ReactMarkdown>
                  </div>
                )}
                {message.imageUrl && (
                  <>
                    <div 
                      className={cn("mt-2 rounded-lg overflow-hidden border cursor-pointer", !message.content && "mt-0")}
                      onClick={() => setIsModalOpen(true)}
                    >
                      <img 
                        src={message.imageUrl} 
                        alt="User upload" 
                        className="max-w-sm w-full h-auto" 
                      />
                    </div>
                    {isModalOpen && <ImagePreviewDialog isOpen={isModalOpen} onOpenChange={setIsModalOpen} imageUrl={message.imageUrl} />}
                  </>
                )}
              </div>
              <div className="flex items-center gap-2">
                <div className="opacity-0 group-hover:opacity-100 transition-opacity">
                  <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground hover:text-white" onClick={() => onStartEdit(message.id, message.content)}>
                    <Pencil className="h-4 w-4" />
                  </Button>
                </div>
                <Avatar className="h-8 w-8 border flex-shrink-0">
                  <AvatarFallback>
                    <UserIcon className="h-5 w-5" />
                  </AvatarFallback>
                </Avatar>
              </div>
            </>
          )}
        </div>
      </div>
    );
  }

  return null;
}
