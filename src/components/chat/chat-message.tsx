'use client';
import { User, ThumbsUp, ThumbsDown } from 'lucide-react';
import { BitoIcon } from '@/components/icons';
import { cn } from '@/lib/utils';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Button } from '@/components/ui/button';
import type { Message } from './chat-panel';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';

interface ChatMessageProps {
  message: Message;
  onFeedback: (messageId: string) => void;
}

export function ChatMessage({ message, onFeedback }: ChatMessageProps) {
  const isModel = message.role === 'model';
  const isUser = message.role === 'user';

  return (
    <div className={cn(
      'group flex items-start gap-4', 
      isUser ? 'justify-end' : 'justify-start'
    )}>
      {isModel && (
        <Avatar className="h-8 w-8 border flex-shrink-0">
          <AvatarFallback className='bg-primary text-primary-foreground'>
            <BitoIcon className="h-5 w-5" />
          </AvatarFallback>
        </Avatar>
      )}

      <div className={cn(
        "max-w-[90%] rounded-lg px-4 py-3 min-w-0 xl:max-w-2xl",
        'bg-secondary'
      )}>
        {message.content && (
          <div className="prose prose-sm dark:prose-invert max-w-none break-words overflow-x-auto">
            <ReactMarkdown remarkPlugins={[remarkGfm]}>
              {message.content}
            </ReactMarkdown>
          </div>
        )}
        {message.imageUrl && (
          <div className={cn("mt-2 rounded-lg overflow-hidden border", !message.content && "mt-0")}>
            <img 
              src={message.imageUrl} 
              alt={isUser ? "User upload" : "Generated by AI"} 
              className="max-w-sm w-full h-auto" 
            />
          </div>
        )}
      </div>

      {isModel && (
        <div className="opacity-0 group-hover:opacity-100 transition-opacity flex items-center self-center gap-1">
          <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground hover:text-foreground">
            <ThumbsUp className="h-4 w-4" />
          </Button>
          <Button variant="ghost" size="icon" className="h-7 w-7 text-muted-foreground hover:text-foreground" onClick={() => onFeedback(message.id)}>
            <ThumbsDown className="h-4 w-4" />
          </Button>
        </div>
      )}

      {isUser && (
        <Avatar className="h-8 w-8 border flex-shrink-0">
          <AvatarImage src="https://placehold.co/40x40.png" alt="User" data-ai-hint="woman portrait" />
          <AvatarFallback>
            <User className="h-5 w-5" />
          </AvatarFallback>
        </Avatar>
      )}
    </div>
  );
}
